{"version":3,"sources":["App.styles.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","_templateObject","Form","styled","form","_templateObject2","Text","input","_templateObject3","Button","button","_templateObject4","Status","p","_templateObject5","App","_useState","useState","_useState2","Object","slicedToArray","status","setStatus","_useState3","_useState4","urlText","setValue","getAllLinks","$","linksObj","links","values","filter","val","attribs","map","link","urlParse","resolve","href","src","length","filename","data","element","document","createElement","setAttribute","concat","encodeURIComponent","style","display","body","appendChild","click","removeChild","download","JSON","stringify","crawlURL","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","url","res","wrap","_context","prev","next","fetch","sent","text","cheerio","load","t0","message","stop","this","_x","apply","arguments","react_default","react","onSubmit","e","preventDefault","onChange","target","value","test","placeholder","Boolean","window","location","hostname","match","rootEl","getElementById","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2rCAEO,IAAMA,EAAcC,YAAHC,KAaXC,EAAOC,IAAOC,KAAVC,KAYJC,EAAOH,IAAOI,MAAVC,KAQJC,EAASN,IAAOO,OAAVC,KAKNC,EAAST,IAAOU,EAAVC,KCmCJC,EAtEH,WAAM,IAAAC,EACcC,mBAAS,IADvBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACPK,EADOH,EAAA,GACCI,EADDJ,EAAA,GAAAK,EAEcN,mBAAS,IAFvBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEPE,EAFOD,EAAA,GAEEE,EAFFF,EAAA,GAkBRG,EAAc,SAACC,GACjB,IAAMC,EAAWD,EAAE,qBACbE,EAAQX,OAAOY,OAAOF,GACvBG,OAAO,SAACC,GAAD,OAASA,EAAIC,UACpBC,IAAI,SAACC,GAAD,OAAUC,IAASC,QAAQb,EAASW,EAAKF,QAAQK,MAAQH,EAAKF,QAAQM,OAC3EV,EAAMW,OAAS,GACfnB,EAAU,cAnBD,SAACoB,EAAUC,GACxB,IAAIC,EAAUC,SAASC,cAAc,KACrCF,EAAQG,aAAa,OAArB,iCAAAC,OAA8DC,mBAAmBN,KACjFC,EAAQG,aAAa,WAAYL,GAEjCE,EAAQM,MAAMC,QAAU,OACxBN,SAASO,KAAKC,YAAYT,GAE1BA,EAAQU,QAERT,SAASO,KAAKG,YAAYX,GAUtBY,CAAS,eAAgBC,KAAKC,UAAU5B,KACrCR,EAAU,qBAGfqC,EAAQ,eAAAC,EAAAzC,OAAA0C,EAAA,EAAA1C,CAAA2C,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAf,EAAAxB,EAAA,OAAAkC,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACbjD,EAAU,eADG+C,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGSC,MAAK,GAAAxB,OA7BV,yCA6BUA,OAAmBkB,IAHjC,cAGHC,EAHGE,EAAAI,KAAAJ,EAAAE,KAAA,EAIUJ,EAAIO,OAJd,OAIHtB,EAJGiB,EAAAI,KAKH7C,EAAI+C,IAAQC,KAAKxB,GAEvBzB,EAAYC,GAPHyC,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAQ,GAAAR,EAAA,SAST/C,EAAU+C,EAAAQ,GAAMC,SATP,yBAAAT,EAAAU,SAAAd,EAAAe,KAAA,aAAH,gBAAAC,GAAA,OAAArB,EAAAsB,MAAAF,KAAAG,YAAA,GA6Bd,OACIC,EAAArB,EAAAjB,cAACuC,EAAA,SAAD,KACID,EAAArB,EAAAjB,cAAC/C,EAAD,MACAqF,EAAArB,EAAAjB,cAAC5C,EAAD,CAAMoF,SARO,SAACC,GAClBA,EAAEC,iBACF7B,EAASlC,KAOD2D,EAAArB,EAAAjB,cAACxC,EAAD,CAAMmF,SAbG,SAACF,GAPN,IAACrB,EAQbxC,GARawC,EAQIqB,EAAEG,OAAOC,MAPrB,qBAAqBC,KAAK1B,KAC3BA,EAAM,UAAYA,GAEfA,KAgB+B2B,YAAY,YAC1CT,EAAArB,EAAAjB,cAACrC,EAAD,eACA2E,EAAArB,EAAAjB,cAAClC,EAAD,KAASS,MCzDLyE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAStD,SAASuD,eAAe,QAEvCC,IAASC,OAAOlB,EAAArB,EAAAjB,cAACyD,EAAD,MAASJ,GDyHnB,kBAAmBK,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d52b1fad.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n\n  html,\n  body {\n    background-color: #282c34;\n    height: 100%;\n    width: 100%;\n  }\n`;\n\nexport const Form = styled.form`\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n  margin: auto;\n  padding: 10px;\n  position: absolute;\n  width:100%;\n`;\n\nexport const Text = styled.input`\n  display: block;\n  font-size: 14px;\n  margin-bottom: 2px;\n  padding: 0;\n  width: 300px;\n`;\n\nexport const Button = styled.button`\n  font-size: 14px;\n  width: 300px;\n`;\n\nexport const Status = styled.p`\n  color: #fff;\n  font-size: 14px;\n  width: 300px;\n`;\n","import React, { Fragment, useState } from 'react';\nimport cheerio from 'cheerio';\nimport urlParse from 'url';\nimport { GlobalStyle, Text, Form, Button, Status } from './App.styles';\n\nconst App = () => {\n    const [status, setStatus] = useState('');\n    const [urlText, setValue] = useState('');\n    const corsAnywhere = 'https://saibot-no-cors.herokuapp.com/';\n\n    const download = (filename, data) => {\n        var element = document.createElement('a');\n        element.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(data)}`);\n        element.setAttribute('download', filename);\n\n        element.style.display = 'none';\n        document.body.appendChild(element);\n\n        element.click();\n\n        document.body.removeChild(element);\n    };\n\n    const getAllLinks = ($) => {\n        const linksObj = $('a[href], img[src]');\n        const links = Object.values(linksObj)\n            .filter((val) => val.attribs)\n            .map((link) => urlParse.resolve(urlText, link.attribs.href || link.attribs.src));\n        if (links.length > 0) {\n            setStatus('Downloaded');\n            download('sitemap.json', JSON.stringify(links));\n        } else setStatus('Nothing to crawl');\n    };\n\n    const crawlURL = async (url) => {\n        setStatus('Crawling...');\n        try {\n            const res = await fetch(`${corsAnywhere}${url}`);\n            const body = await res.text();\n            const $ = cheerio.load(body);\n\n            getAllLinks($);\n        } catch (error) {\n            setStatus(error.message);\n        }\n    };\n\n    const addHttp = (url) => {\n        if (!/^(?:f|ht)tps?:\\/\\//.test(url)) {\n            url = 'http://' + url;\n        }\n        return url;\n    };\n\n    const handleChange = (e) => {\n        setValue(addHttp(e.target.value));\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        crawlURL(urlText);\n    };\n\n    return (\n        <Fragment>\n            <GlobalStyle />\n            <Form onSubmit={handleSubmit}>\n                <Text onChange={handleChange} placeholder=\"http://\" />\n                <Button>Submit</Button>\n                <Status>{status}</Status>\n            </Form>\n        </Fragment>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootEl = document.getElementById('root');\n\nReactDOM.render(<App />, rootEl);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nif (module.hot) {\n    module.hot.accept('./App', () => {\n      const NextApp = require('./App').default;\n      ReactDOM.render(<NextApp />, rootEl);\n    });\n  }\nserviceWorker.unregister();\n"],"sourceRoot":""}